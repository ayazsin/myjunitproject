=========DAY05============
-CSS SELECTOR
    -tag[attr='value']
        -input[id='session_email']
    -tag#value or #value
        -input#session_email
        -#session_email
    -tag.classvalue
        -input.form-control
        -.form-control
-What are the differences between xpath and css selector?
    -Css is a little faster and better, because xpath navigates through the Dom,
     css Selector locates the target without navigation
    -xpath is more common. We can write dynamic xpath to locate element.
    -They have different syntax. For ex: //is used by xpath but not in css
    -xpath is a little bit more safer and reliable
    -css locators usually same across the browsers, so it is more reliable.

*****CheckBox
- isSelected() --->>>check if a box is checked.return true if box is checked. returns false if box is unchecked
- click() is used to check/uncheck checkboxes.
-------------------------------------------------------------
*****Radio Button
- isSelected() --->>>check if a box is checked.return true if box is checked. returns false if bo
-click() is used to check/uncheck radio buttons
-------------------------------------------------------------
*****DropDown
*****Steps for interaction with dropdown elements
-Step 1: Locate the select element dropdown using any locator. Example:
 WebElement selectElement=driver.findElement(By.id(“value of id"));
-Step 2: Create Select object and pass the selectElement to that object.
Example:
 Select options=new Select(selectElement);
-Step 3: We now can handle dropdown using any method. Example:
options.selectByIndex(1); Index starts from 0.This takes an integer as parameter
options.selectByValue(“1”); Pass the value of the option. This takes a string as parameter
options.selectByVisibleText(“Watch”); Pass the Text of the option. This takes a string as parameter

*****There are 3 ways to select from a dropdown
 select.selectByIndex(1);
 select.selectByValue("2");
 select.selectByVisibleText("Option 1");

*****getOptions(); returns all dropdown options as List<WebElement>
 List<WebElement> allOption = select.getOptions();

*****getFirstSelectedOption(); returns the first selected option from a dropdown
 WebElement firstSelectedOption = select.getFirstSelectedOption();

